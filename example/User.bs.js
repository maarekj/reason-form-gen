// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Belt_List = require("rescript/lib/js/belt_List.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_format = require("rescript/lib/js/caml_format.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Belt_MapString = require("rescript/lib/js/belt_MapString.js");
var Form$ReasonForm = require("@maarekj/reason-form/src/Form.bs.js");
var Hook$ReasonForm = require("@maarekj/reason-form/src/Hook.bs.js");
var Wrap$ReasonForm = require("@maarekj/reason-form/src/Wrap.bs.js");
var Field$ReasonForm = require("@maarekj/reason-form/src/Field.bs.js");
var Helper$ReasonForm = require("@maarekj/reason-form/src/Helper.bs.js");
var BootstrapRender$ReasonForm = require("@maarekj/reason-form/src/BootstrapRender.bs.js");
var Gender$MaarekjReasonFormGen = require("./Gender.bs.js");
var Address$MaarekjReasonFormGen = require("./Address.bs.js");
var Metadata$MaarekjReasonFormGen = require("./Metadata.bs.js");
var Generated_User$MaarekjReasonFormGen = require("./Generated/Generated_User.bs.js");

var empty = Generated_User$MaarekjReasonFormGen.Value.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);

var rootField = Field$ReasonForm.idField("root");

var fields = Generated_User$MaarekjReasonFormGen.createFields(rootField, rootField);

function onValidate(fields, form) {
  var id = function (form) {
    return form;
  };
  var values = Form$ReasonForm.getValues(form);
  var addError = function (f) {
    var partial_arg = f.key;
    return function (param, param$1) {
      return Form$ReasonForm.addError(partial_arg, param, param$1);
    };
  };
  var a = values.age;
  var tmp;
  if (a < 18) {
    var partial_arg = addError(fields.age);
    tmp = (function (param) {
        return partial_arg("You must be major.", param);
      });
  } else {
    tmp = id;
  }
  var match = values.username;
  var tmp$1;
  if (match !== undefined) {
    switch (match) {
      case "" :
          var partial_arg$1 = addError(fields.username);
          tmp$1 = (function (param) {
              return partial_arg$1("Username is required.", param);
            });
          break;
      case "maarek" :
          var partial_arg$2 = addError(fields.username);
          tmp$1 = (function (param) {
              return partial_arg$2("Username is already used.", param);
            });
          break;
      default:
        tmp$1 = id;
    }
  } else {
    var partial_arg$3 = addError(fields.username);
    tmp$1 = (function (param) {
        return partial_arg$3("Username is required.", param);
      });
  }
  var match$1 = values.firstname;
  var tmp$2;
  if (match$1 !== undefined) {
    if (match$1 === "") {
      var partial_arg$4 = addError(fields.firstname);
      tmp$2 = (function (param) {
          return partial_arg$4("Firstname is required.", param);
        });
    } else {
      tmp$2 = id;
    }
  } else {
    var partial_arg$5 = addError(fields.firstname);
    tmp$2 = (function (param) {
        return partial_arg$5("Firstname is required.", param);
      });
  }
  var match$2 = values.lastname;
  var tmp$3;
  if (match$2 !== undefined) {
    if (match$2 === "") {
      var partial_arg$6 = addError(fields.lastname);
      tmp$3 = (function (param) {
          return partial_arg$6("Lastname is required.", param);
        });
    } else {
      tmp$3 = id;
    }
  } else {
    var partial_arg$7 = addError(fields.lastname);
    tmp$3 = (function (param) {
        return partial_arg$7("Lastname is required.", param);
      });
  }
  var form$1 = tmp(tmp$1(tmp$2(tmp$3(form))));
  var form$2 = Belt_List.size(values.addresses) < 1 ? addError(fields.addresses[0])("Must contains one address at least.", form$1) : form$1;
  var form$3 = Address$MaarekjReasonFormGen.validateOptional(fields.mainAddress, form$2);
  var __x = Belt_List.mapWithIndex(values.addresses, (function (i, a) {
          return [
                  i,
                  a
                ];
        }));
  var form$4 = Belt_List.reduce(__x, form$3, (function (form, param) {
          return Address$MaarekjReasonFormGen.validate(Curry._1(fields.addresses[1], param[0]), form);
        }));
  var __x$1 = Belt_List.mapWithIndex(values.tags, (function (i, a) {
          return [
                  i,
                  a
                ];
        }));
  var form$5 = Belt_List.reduce(__x$1, form$4, (function (form, param) {
          var i = param[0];
          var tmp;
          switch (param[1]) {
            case "" :
                var partial_arg = addError(Curry._1(fields.tags[1], i));
                tmp = (function (param) {
                    return partial_arg("Tag is required.", param);
                  });
                break;
            case "forbidden" :
                var partial_arg$1 = addError(Curry._1(fields.tags[1], i));
                tmp = (function (param) {
                    return partial_arg$1("Forbidden tag.", param);
                  });
                break;
            default:
              tmp = id;
          }
          return tmp(form);
        }));
  return Belt_List.reduce(Belt_MapString.toList(values.metadata), form$5, (function (form, param) {
                return Metadata$MaarekjReasonFormGen.validate(Curry._1(fields.metadata[1], param[0]), form);
              }));
}

function initializeForm(initialValues) {
  return Form$ReasonForm.initializeForm(initialValues, undefined, undefined, undefined, undefined, undefined, (function (param) {
                return onValidate(fields, param);
              }), undefined);
}

function useForm(initialValues) {
  return React.useState(function () {
                var form = initializeForm(initialValues);
                return [
                        Wrap$ReasonForm.make(undefined, form),
                        fields
                      ];
              })[0];
}

function toText(a) {
  return Belt_Option.getWithDefault(a, "");
}

function fromText(a) {
  return Caml_option.some(a);
}

function User$Form(Props) {
  var match = React.useState(function () {
        return false;
      });
  var setExpanded = match[1];
  var expanded = match[0];
  var match$1 = useForm(empty);
  var fields = match$1[1];
  var wrap = match$1[0];
  var match$2 = Hook$ReasonForm.useFormMeta(wrap);
  var isSubmitting = match$2.isSubmitting;
  return React.useMemo((function () {
                return React.createElement(BootstrapRender$ReasonForm.Form.make, {
                            wrap: wrap,
                            className: "form",
                            onSubmit: (function (form) {
                                console.log("values", Form$ReasonForm.getValues(form));
                                return new Promise((function (resolve, param) {
                                              setTimeout((function (param) {
                                                      return resolve({
                                                                  TAG: /* Error */1,
                                                                  _0: "Error on form"
                                                                });
                                                    }), 3000);
                                              
                                            }));
                              }),
                            render: React.createElement("fieldset", {
                                  disabled: isSubmitting
                                }, React.createElement("div", {
                                      className: "card",
                                      style: {
                                        marginTop: "50px",
                                        marginRight: "auto",
                                        marginLeft: "auto",
                                        width: "600px"
                                      }
                                    }, React.createElement("div", {
                                          className: "card-body"
                                        }, React.createElement("h1", {
                                              className: "card-title"
                                            }, "Hello World"), React.createElement(BootstrapRender$ReasonForm.Row.make, {
                                              label: "Username",
                                              input: React.createElement(BootstrapRender$ReasonForm.Input.make, {
                                                    wrap: wrap,
                                                    type_: "text",
                                                    toText: toText,
                                                    fromText: fromText,
                                                    field: fields.username
                                                  }),
                                              wrap: wrap,
                                              field: fields.username
                                            }), React.createElement("div", {
                                              className: "row"
                                            }, React.createElement("div", {
                                                  className: "col-sm-6"
                                                }, React.createElement(BootstrapRender$ReasonForm.Row.make, {
                                                      label: "Lastname",
                                                      input: React.createElement(BootstrapRender$ReasonForm.Input.make, {
                                                            wrap: wrap,
                                                            type_: "text",
                                                            toText: toText,
                                                            fromText: fromText,
                                                            field: fields.lastname
                                                          }),
                                                      wrap: wrap,
                                                      field: fields.lastname
                                                    })), React.createElement("div", {
                                                  className: "col-sm-6"
                                                }, React.createElement(BootstrapRender$ReasonForm.Row.make, {
                                                      label: "Firstname",
                                                      input: React.createElement(BootstrapRender$ReasonForm.Input.make, {
                                                            wrap: wrap,
                                                            type_: "text",
                                                            toText: toText,
                                                            fromText: fromText,
                                                            field: fields.firstname
                                                          }),
                                                      wrap: wrap,
                                                      field: fields.firstname
                                                    }))), React.createElement(Gender$MaarekjReasonFormGen.GenderRow.make, {
                                              wrap: wrap,
                                              field: fields.gender,
                                              expanded: expanded
                                            }), React.createElement(BootstrapRender$ReasonForm.Row.make, {
                                              label: "Age",
                                              input: React.createElement(BootstrapRender$ReasonForm.Input.make, {
                                                    wrap: wrap,
                                                    type_: "text",
                                                    toText: (function (prim) {
                                                        return String(prim);
                                                      }),
                                                    fromText: (function (v) {
                                                        try {
                                                          return Caml_format.caml_int_of_string(v);
                                                        }
                                                        catch (exn){
                                                          return 0;
                                                        }
                                                      }),
                                                    field: fields.age
                                                  }),
                                              wrap: wrap,
                                              field: fields.age
                                            }), React.createElement(BootstrapRender$ReasonForm.StringMap.make, {
                                              wrap: wrap,
                                              label: "Méta-données",
                                              renderInput: (function (key) {
                                                  return React.createElement(Metadata$MaarekjReasonFormGen.Form.make, {
                                                              wrap: wrap,
                                                              fields: Curry._1(fields.metadata[1], key),
                                                              title: key
                                                            });
                                                }),
                                              field: fields.metadata[0]
                                            }), React.createElement(BootstrapRender$ReasonForm.List.make, {
                                              wrap: wrap,
                                              onAdd: (function (param) {
                                                  var partial_arg = fields.tags[0];
                                                  return Wrap$ReasonForm.dispatch(wrap, (function (param) {
                                                                return Helper$ReasonForm.List.push(partial_arg, "", param);
                                                              }));
                                                }),
                                              onRemove: (function (i) {
                                                  var partial_arg = fields.tags[0];
                                                  return Wrap$ReasonForm.dispatch(wrap, (function (param) {
                                                                return Helper$ReasonForm.List.remove(partial_arg, i, param);
                                                              }));
                                                }),
                                              label: "Tags",
                                              renderInput: (function (index) {
                                                  var field = Curry._1(fields.tags[1], index);
                                                  return React.createElement(BootstrapRender$ReasonForm.Row.make, {
                                                              label: "Tag " + index,
                                                              input: React.createElement(BootstrapRender$ReasonForm.Input.make, {
                                                                    wrap: wrap,
                                                                    toText: (function (v) {
                                                                        return v;
                                                                      }),
                                                                    fromText: (function (v) {
                                                                        return v;
                                                                      }),
                                                                    field: field
                                                                  }),
                                                              wrap: wrap,
                                                              field: field
                                                            });
                                                }),
                                              field: fields.tags[0]
                                            }), React.createElement(BootstrapRender$ReasonForm.Row.make, {
                                              label: "",
                                              input: React.createElement(Address$MaarekjReasonFormGen.Form.make, {
                                                    wrap: wrap,
                                                    fields: fields.mainAddress,
                                                    title: "Main Address"
                                                  }),
                                              wrap: wrap,
                                              field: fields.mainAddress.self
                                            }), React.createElement(BootstrapRender$ReasonForm.List.make, {
                                              wrap: wrap,
                                              onAdd: (function (param) {
                                                  var partial_arg = fields.addresses[0];
                                                  return Wrap$ReasonForm.dispatch(wrap, (function (param) {
                                                                return Helper$ReasonForm.List.push(partial_arg, Address$MaarekjReasonFormGen.empty, param);
                                                              }));
                                                }),
                                              onRemove: (function (i) {
                                                  var partial_arg = fields.addresses[0];
                                                  return Wrap$ReasonForm.dispatch(wrap, (function (param) {
                                                                return Helper$ReasonForm.List.remove(partial_arg, i, param);
                                                              }));
                                                }),
                                              label: "Addresses",
                                              renderInput: (function (index) {
                                                  return React.createElement(Address$MaarekjReasonFormGen.Form.make, {
                                                              wrap: wrap,
                                                              fields: Curry._1(fields.addresses[1], index),
                                                              title: "Address " + index
                                                            });
                                                }),
                                              field: fields.addresses[0]
                                            }), React.createElement(BootstrapRender$ReasonForm.FormErrors.make, {
                                              wrap: wrap
                                            })), React.createElement("div", {
                                          className: "card-footer"
                                        }, React.createElement(BootstrapRender$ReasonForm.SubmitButton.make, {
                                              wrap: wrap,
                                              text: "Submit",
                                              submittingText: "Submitting..."
                                            }), React.createElement(BootstrapRender$ReasonForm.ResetButton.make, {
                                              wrap: wrap,
                                              initialForm: wrap.initial,
                                              text: "Reset"
                                            }), React.createElement("button", {
                                              className: "btn btn-xs btn-default",
                                              onClick: (function ($$event) {
                                                  $$event.preventDefault();
                                                  return Curry._1(setExpanded, (function (prim) {
                                                                return !prim;
                                                              }));
                                                })
                                            }, "Expanded = " + (
                                              expanded ? "true" : "false"
                                            )))))
                          });
              }), [
              isSubmitting,
              expanded
            ]);
}

var Form = {
  Render: undefined,
  toText: toText,
  fromText: fromText,
  make: User$Form
};

var Value = Generated_User$MaarekjReasonFormGen.Value;

var createFields = Generated_User$MaarekjReasonFormGen.createFields;

exports.Value = Value;
exports.createFields = createFields;
exports.empty = empty;
exports.rootField = rootField;
exports.fields = fields;
exports.onValidate = onValidate;
exports.initializeForm = initializeForm;
exports.useForm = useForm;
exports.Form = Form;
/* empty Not a pure module */
