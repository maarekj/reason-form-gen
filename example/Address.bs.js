// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Form$ReasonForm = require("@maarekj/reason-form/src/Form.bs.js");
var BootstrapRender$ReasonForm = require("@maarekj/reason-form/src/BootstrapRender.bs.js");
var Generated_Address$MaarekjReasonFormGen = require("./Generated/Generated_Address.bs.js");

var empty = Generated_Address$MaarekjReasonFormGen.Value.make(undefined, undefined, undefined, undefined);

function validateValue(address, fields, form) {
  var addError = function (f) {
    var partial_arg = f.key;
    return function (param, param$1) {
      return Form$ReasonForm.addError(partial_arg, param, param$1);
    };
  };
  var id = function (form) {
    return form;
  };
  var match = address.city;
  var tmp;
  switch (match) {
    case "" :
        var partial_arg = addError(fields.city);
        tmp = (function (param) {
            return partial_arg("City is required.", param);
          });
        break;
    case "forbidden" :
        var partial_arg$1 = addError(fields.city);
        tmp = (function (param) {
            return partial_arg$1("Forbidden city.", param);
          });
        break;
    default:
      tmp = id;
  }
  var match$1 = address.street;
  var tmp$1;
  switch (match$1) {
    case "" :
        var partial_arg$2 = addError(fields.street);
        tmp$1 = (function (param) {
            return partial_arg$2("Street is required.", param);
          });
        break;
    case "forbidden" :
        var partial_arg$3 = addError(fields.street);
        tmp$1 = (function (param) {
            return partial_arg$3("Forbidden street.", param);
          });
        break;
    default:
      tmp$1 = id;
  }
  return tmp(tmp$1(form));
}

function validate(fields, form) {
  var address = Curry._1(fields.self.getValue, Form$ReasonForm.getValues(form));
  return validateValue(address, fields, form);
}

function validateOptional(fields, form) {
  var address = Curry._1(fields.self.getValue, Form$ReasonForm.getValues(form));
  if (address !== undefined) {
    return validateValue(address, fields, form);
  } else {
    return form;
  }
}

function optionToText(a) {
  return Belt_Option.getWithDefault(a, "");
}

function optionFromText(a) {
  return Caml_option.some(a);
}

function Address$Form(Props) {
  var wrap = Props.wrap;
  var fields = Props.fields;
  var title = Props.title;
  return React.createElement("div", {
              className: "card"
            }, React.createElement("div", {
                  className: "card-body"
                }, title !== undefined ? React.createElement("h5", {
                        className: "card-title"
                      }, title) : null, React.createElement("div", {
                      className: "row"
                    }, React.createElement("div", {
                          className: "col-sm-12"
                        }, React.createElement(BootstrapRender$ReasonForm.Row.make, {
                              label: "Street",
                              input: React.createElement(BootstrapRender$ReasonForm.Input.make, {
                                    wrap: wrap,
                                    type_: "text",
                                    toText: (function (v) {
                                        return v;
                                      }),
                                    fromText: (function (v) {
                                        return v;
                                      }),
                                    field: fields.street
                                  }),
                              wrap: wrap,
                              field: fields.street
                            }))), React.createElement("div", {
                      className: "row"
                    }, React.createElement("div", {
                          className: "col-sm-6"
                        }, React.createElement(BootstrapRender$ReasonForm.Row.make, {
                              label: "City",
                              input: React.createElement(BootstrapRender$ReasonForm.Input.make, {
                                    wrap: wrap,
                                    type_: "text",
                                    toText: (function (v) {
                                        return v;
                                      }),
                                    fromText: (function (v) {
                                        return v;
                                      }),
                                    field: fields.city
                                  }),
                              wrap: wrap,
                              field: fields.city
                            })), React.createElement("div", {
                          className: "col-sm-6"
                        }, React.createElement(BootstrapRender$ReasonForm.Row.make, {
                              label: "Zipcode",
                              input: React.createElement(BootstrapRender$ReasonForm.Input.make, {
                                    wrap: wrap,
                                    type_: "text",
                                    toText: optionToText,
                                    fromText: optionFromText,
                                    field: fields.zipcode
                                  }),
                              wrap: wrap,
                              field: fields.zipcode
                            })))));
}

var Form = {
  Render: undefined,
  optionToText: optionToText,
  optionFromText: optionFromText,
  make: Address$Form
};

var Value = Generated_Address$MaarekjReasonFormGen.Value;

var createFields = Generated_Address$MaarekjReasonFormGen.createFields;

exports.Value = Value;
exports.createFields = createFields;
exports.empty = empty;
exports.validateValue = validateValue;
exports.validate = validate;
exports.validateOptional = validateOptional;
exports.Form = Form;
/* empty Not a pure module */
