// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var React = require("react");
var Form$ReasonForm = require("@maarekj/reason-form/src/Form.bs.js");
var BootstrapRender$ReasonForm = require("@maarekj/reason-form/src/BootstrapRender.bs.js");
var Generated_Metadata$MaarekjReasonFormGen = require("./Generated/Generated_Metadata.bs.js");

var empty = Generated_Metadata$MaarekjReasonFormGen.Value.make(undefined, undefined, undefined);

function validate(fields, form) {
  var metadata = Curry._1(fields.self.getValue, Form$ReasonForm.getValues(form));
  var addError = function (f) {
    var partial_arg = f.key;
    return function (param, param$1) {
      return Form$ReasonForm.addError(partial_arg, param, param$1);
    };
  };
  var id = function (form) {
    return form;
  };
  var match = metadata.desc;
  var tmp;
  if (match === "forbidden") {
    var partial_arg = addError(fields.desc);
    tmp = (function (param) {
        return partial_arg("Forbidden desc.", param);
      });
  } else {
    tmp = id;
  }
  var match$1 = metadata.title;
  var tmp$1;
  switch (match$1) {
    case "" :
        var partial_arg$1 = addError(fields.title);
        tmp$1 = (function (param) {
            return partial_arg$1("Title is required.", param);
          });
        break;
    case "forbidden" :
        var partial_arg$2 = addError(fields.title);
        tmp$1 = (function (param) {
            return partial_arg$2("Forbidden title.", param);
          });
        break;
    default:
      tmp$1 = id;
  }
  return tmp(tmp$1(form));
}

function Metadata$Form(Props) {
  var wrap = Props.wrap;
  var fields = Props.fields;
  var title = Props.title;
  return React.createElement("div", {
              className: "card"
            }, React.createElement("div", {
                  className: "card-body"
                }, title !== undefined ? React.createElement("h5", {
                        className: "card-title"
                      }, title) : null, React.createElement("div", {
                      className: "row"
                    }, React.createElement("div", {
                          className: "col-sm-8"
                        }, React.createElement(BootstrapRender$ReasonForm.Row.make, {
                              label: "Meta-title",
                              input: React.createElement(BootstrapRender$ReasonForm.Input.make, {
                                    wrap: wrap,
                                    type_: "text",
                                    toText: (function (v) {
                                        return v;
                                      }),
                                    fromText: (function (v) {
                                        return v;
                                      }),
                                    field: fields.title
                                  }),
                              wrap: wrap,
                              field: fields.title
                            })), React.createElement("div", {
                          className: "col-sm-4"
                        }, React.createElement(BootstrapRender$ReasonForm.Row.make, {
                              label: "Meta-Description",
                              input: React.createElement(BootstrapRender$ReasonForm.Input.make, {
                                    wrap: wrap,
                                    type_: "text",
                                    toText: (function (v) {
                                        return v;
                                      }),
                                    fromText: (function (v) {
                                        return v;
                                      }),
                                    field: fields.desc
                                  }),
                              wrap: wrap,
                              field: fields.desc
                            })))));
}

var Form = {
  Render: undefined,
  make: Metadata$Form
};

var Value = Generated_Metadata$MaarekjReasonFormGen.Value;

var createFields = Generated_Metadata$MaarekjReasonFormGen.createFields;

exports.Value = Value;
exports.createFields = createFields;
exports.empty = empty;
exports.validate = validate;
exports.Form = Form;
/* empty Not a pure module */
